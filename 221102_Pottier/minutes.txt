Based on 'You only linearize once'
  objective: explain reverse mode AD as
    1. forward mode AD
    2. unzipping
    3. transposition

intuition: forward-mode AD "compiles" into linear IR + non-linear IR
  unzipping takes out linear IR from the rest
  transposition only operates on linear IR

Process:
  surface language
  -[elaboration]-> linear language (only unrestricted variables)
  -[forward mode]-> multi-result linear language
  -[unzipping]-> pair of linear & mixed linear programs
  -[transpose]-> pair of modified linear & mixed linear programs

3 views of programs
  - syntax
  - dataflow graph
  - linear transformation (matrix)

drop/dup: introduced during forward-mode AD
  line noise: inferrable afterward
  makes transposition easier

  Michele: `dup` location is performance critical
    Gabriel: matters if it makes a deep copy

  Pierre: how about impact of `dup` on code generated by transposition?
    Answer: not clear, maybe language is too forgiving
    Michele: carefuly consider interaction with multiplication

Dependency unrestricted vs. linear
  linear output depends on unrestricted and linear inputs
  unrestricted output depends only on unrestricted input

Unzipping: does not care about forward mode
  purely syntactic source-to-source transform

  Adrien: could forward AD be defined on linear part as well?
    Answer: probably since syntax enforce containment
      Adrien: necessary if one internalizes differentiation?

  Gabriel: relation with program slicing?
    Answer: somewhat related

  Adrien: not type-directed
    cannot derive output derivative type from source type

    need source *code* to determine what needs to be stored
      Sigma type!
      
      Pierre: related to Pouzet's struggles?
      Paul-AndrÃ©: any hope to describe it formally?
      mention "Ulrich work"? "stack description"

Transposition: inverting linear wires
  ie. functions with no unrestricted results

  zero -> dup
  + -> drop
  drop -> +
  dup -> zero

Michele: relation with partial evaluation
  Answer: doesn't feel like it
          nothing becomes static, just more things are dynamic
